You are a senior Golang code reviewer.

I want you to review all changes **between these commits**:
- Current commit: f6e771f95135b2668b78bb2ea31a108b53b5bfd0
- New commit: dbf6cabfbd85e1a2e93bcb05eb9b349d0f79866a

Your task:
- Compute the git diff between the two commits.
- Review ONLY the changed lines/functions/files, but you may reference other parts of the source code in ./ for context.
- Provide feedback on:
  - Code quality & readability
  - Correctness & potential bugs
  - Security considerations
  - Concurrency & memory handling
  - Error handling and logging
  - Go best practices (idiomatic Go, naming, package usage, simplicity)

Output format:
Return a **JSON object** with this schema:

type Review struct {
	File    string `json:"file"`
	Line    uint64 `json:"line"`
	Comment string `json:"comment"`
}
type ReviewResult struct {
	Score   float64  `json:"score"`
	Reviews []Review `json:"reviews"`
}


Rules:
- Always include `file` and `line` from the diff.
- Flag risky changes (deadlocks, data races, SQL injections, hardcoded secrets, etc.) with severity = "error".
- Stylistic or minor suggestions should be severity = "info".
- Be concise but specific. Suggest exact improvements.
- Ignore irrelevant files (like docs, configs) unless security-sensitive.


output json to ./review.json